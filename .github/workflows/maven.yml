name: Java CI with Maven

on:
  push:
    branches: [ main, zh ]
  pull_request:
    branches: [ main, zh ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml -X

    - name: Run tests with coverage
      run: mvn test jacoco:report -X

    - name: Verify coverage
      run: mvn jacoco:check
      
    - name: List Generated Files
      run: ls -la target && ls -la target/site && ls -la target/site/jacoco || echo "Jacoco directory not found"

    # Ideiglenesen kikommentezve az artifact feltöltési lépések
    # - name: Upload coverage report
    #   uses: actions/upload-artifact@d4c0403c3afd4e376e6a5c2a18272e29214626ad
    #   with:
    #     name: coverage-report
    #     path: target/site/jacoco/
    #     if-no-files-found: warn
        
    # - name: Upload JAR artifact
    #   uses: actions/upload-artifact@d4c0403c3afd4e376e6a5c2a18272e29214626ad
    #   with:
    #     name: MovieList
    #     path: target/*.jar
    #     if-no-files-found: warn
        
    # Ideiglenesen kikommentezve az Artifactory feltöltési lépések
    # - name: Set up JFrog CLI
    #   uses: jfrog/setup-jfrog-cli@v3
    #   with:
    #     version: 2.16.1
    #   
    # - name: Configure JFrog CLI
    #   env:
    #     ARTIFACTORY_URL: "https://artifactory.example.com/artifactory"
    #     ARTIFACTORY_USER: ${{ github.actor }}
    #     ARTIFACTORY_PASSWORD: ${{ github.token }}
    #   run: |
    #     jf config add --url="${ARTIFACTORY_URL}" --user="${ARTIFACTORY_USER}" --password="${ARTIFACTORY_PASSWORD}" --interactive=false
    #   
    # - name: Deploy artifact to Artifactory
    #   run: |
    #     # Artifactory feltöltés JFrog CLI-val
    #     jf rt upload "target/*.jar" "libs-snapshot-local/com/movielist/" --build-name=movielist --build-number=${{ github.run_number }}
    #     jf rt build-publish movielist ${{ github.run_number }}
    
    # Sikeres build jelzése
    - name: Build Success
      run: echo "Build and tests completed successfully!"
